#import sickbeard
#import datetime
#from sickbeard.common import *
#from sickbeard import db
#from sickbeard import history

#set global $title="Home"
#set global $header="Show List"

#set global $sbPath = ".."

#set global $topmenu="home"#
#import os.path
#include $os.path.join($sickbeard.PROG_DIR, "data/interfaces/default/inc_top.tmpl")

#set $myDB = $db.DBConnection()
#set $today = str($datetime.date.today().toordinal())
#set $downloadedEps = $myDB.select("SELECT showid, COUNT(*), (SELECT date FROM history h WHERE tv.showid = h.showid AND action IN ("+",".join([str(x) for x in ($Quality.DOWNLOADED + $Quality.SNATCHED + $Quality.SNATCHED_PROPER)])+") ORDER BY date DESC LIMIT 1) FROM tv_episodes tv WHERE (status IN ("+",".join([str(x) for x in $Quality.DOWNLOADED + [$ARCHIVED]])+") OR (status IN ("+",".join([str(x) for x in $Quality.SNATCHED + $Quality.SNATCHED_PROPER])+") AND location != '')) AND season != 0 and episode != 0 AND airdate <= "+$today+" GROUP BY showid")
#set $allEps = $myDB.select("SELECT showid, COUNT(*) FROM tv_episodes WHERE season != 0 and episode != 0 AND (airdate != 1 OR status IN ("+",".join([str(x) for x in ($Quality.DOWNLOADED + $Quality.SNATCHED + $Quality.SNATCHED_PROPER) + [$ARCHIVED]])+")) AND airdate <= "+$today+" AND status != "+str($IGNORED)+" GROUP BY showid")
#set $lastWatchedEps = $myDB.select("SELECT showid, MAX(last_watched) FROM tv_episodes GROUP BY showid")

<script type="text/javascript" charset="utf-8">
<!--

\$.tablesorter.addParser({
    id: 'loadingNames',
    is: function(s) {
        return false;
    },
    format: function(s) {
        if (s.indexOf('Loading...') == 0)
            return s.replace('Loading...','000');
        return (s || '').replace(/^(The|A)\s/i,'');
    },
    type: 'text'
});

\$.tablesorter.addParser({
    id: 'quality',
    is: function(s) {
        return false;
    },
    format: function(s) {
        return s.replace('hd1080p',5).replace('hd720p',4).replace('hd',3).replace('sd',2).replace('any',1).replace('custom',7);
    },
    type: 'numeric'
});

\$.tablesorter.addParser({
    id: 'eps',
    is: function(s) {
        return false;
    },
    format: function(s) {
        match = s.match(/^(.*)/);

        if (match == null || match[1] == "?")
            return -10;

        var nums = match[1].split(" / ");

        if (parseInt(nums[0]) === 0)
            return parseInt(nums[1]);

        var finalNum = parseInt((nums[0]/nums[1])*1000)*100;
        if (finalNum > 0)
            finalNum += parseInt(nums[0]);

        return finalNum;
    },
    type: 'numeric'
});

\$(document).ready(function(){

    \$("#showListTable:has(tbody tr)").tablesorter({
        sortList: [[4,1],[2,0]],
        textExtraction: {
            6: function(node) { return \$(node).find("span").text().toLowerCase(); },
            7: function(node) { return \$(node).find("span").text(); },
            8: function(node) { return \$(node).find("img").attr("alt"); }
        },
        widgets: ['saveSort', 'zebra', 'stickyHeaders'],
        headers: {
            0: { sorter: 'isoDate' },
			1: { sorter: 'isoDate' },
			2: { sorter: 'isoDate' },
			3: { sorter: 'isoDate' },
            4: { sorter: 'loadingNames' },
            6: { sorter: 'quality' },
            7: { sorter: 'eps' },
            9: { sorter: false }
        },
        sortStable: true
    });

    jQuery("a.link-set-wanted").click( function(e) {
        jQuery.ajax({
            url: this.href,
            complete: function(){ location.reload(); },
        });

        e.preventDefault();
        return false;
    });

    var Indicator = function(dataKey, textTemplate, args) {
        if (dataKey == null || textTemplate == null) throw "Arguments missing";

        var key = dataKey;
        var textTemplate = textTemplate;

        var thresholds = [];
        var threshold_default = "hidden";
        var isActive = function(data){ return true; };
        var computeValue = function(value, data) { return value; };
        var formatValue = function(value, data) { return value; };

        if (args) {
            if (args.thresholds && jQuery.isArray(args.thresholds)) {
                for(var i=0; i < args.thresholds.length; i++) {
                    if (args.thresholds[i].check && args.thresholds[i].value) thresholds.push(args.thresholds[i]);
                }
            }

            if (args.threshold_default) threshold_default = args.threshold_default;
            if (args.isActive && jQuery.isFunction(args.isActive)) isActive = args.isActive;
            if (args.computeValue && jQuery.isFunction(args.computeValue)) computeValue = args.computeValue;
            if (args.formatValue && jQuery.isFunction(args.formatValue)) formatValue = args.formatValue;
        }

        var computeThreshold = function(value) {
            var ret = threshold_default;
            var found = false;
            for (var i=0; i < thresholds.length && !found; i++) {
                if ( eval(value + thresholds[i].check) ) {
                    ret = thresholds[i].value;
                    found = true;
                }
            }
            return ret;
        };

        var insert = function(el, text, cls) {
            jQuery('<div />', {"class": cls, "text": text}).appendTo( el );
        };

        var me = {
            apply : function(el, data) {
                if (el == null) return;
                el = jQuery(el);

                if (data == null) return;

                var value = data[dataKey];
                if (value == null) return;

                if (!isActive(data)) return;

                var text = textTemplate.replace( '{}', formatValue(value, data) );
                var cls = computeThreshold( computeValue(value, data) );

                insert(el, text, cls);
            }
        };

        Indicator.prototype.all = Indicator.prototype.all || [];
        Indicator.prototype.all.push(me);

        return me;
    };

    var Thresholds = (function() {

        var Threshold = function(check, cls) {
            return {check: check, value: cls}
        };

        return {
            // Unary
            "true": function(cls) { return new Threshold('==true', cls); },
            "false": function(cls) { return new Threshold('==false', cls); },
            "null": function(cls) { return new Threshold('==null', cls); },

            // Binary
            "eq": function(v, cls) { return new Threshold('==' + v, cls); },
            "lt": function(v, cls) { return new Threshold(' <' + v, cls); },
            "gt": function(v, cls) { return new Threshold(' >' + v, cls); },
            "le": function(v, cls) { return new Threshold('<=' + v, cls); },
            "ge": function(v, cls) { return new Threshold('>=' + v, cls); }

        };

    })();

    new Indicator("episode", "New Show!", { threshold_default: 'success', isActive: function(data){ return data.season == 1 && data.episode == 1; }});
    new Indicator("paused", "This show is paused", { threshold_default : "error", isActive: function(data) { return data.paused; }});
    new Indicator("stay_ahead", "Autodownloading disabled", { threshold_default : "error", isActive: function(data) { return !data.paused && data.stay_ahead == 0; }});
    new Indicator("queued", "Currently searching for {} episodes", { thresholds : [Thresholds.gt(1, "error"), Thresholds.gt(0, "warning")] });
    new Indicator("snatched", "Currently downloading {} episodes", { thresholds : [Thresholds.gt(0, "success")] });
    new Indicator("stay_ahead", "{} episodes ready to be watched",
        {
            isActive: function(data) { return !data.paused && data.stay_ahead > 0 && data.to_watch > 0; },
            thresholds: [Thresholds.eq(0, "error bold"), Thresholds.ge(1, "success"), Thresholds.gt(0, "light_success")],
            computeValue: function(value, data) { return data.downloaded / Math.min(data.to_watch, data.stay_ahead); },
            formatValue: function(value, data) { return data.downloaded + " / " + Math.min(data.to_watch, data.stay_ahead); }
        }
    );
    new Indicator("safe_delete", "{} episodes ready to be archived", { thresholds : [Thresholds.ge(20, "error bold"), Thresholds.ge(10, "error"), Thresholds.ge(5, "warning")] });

    jQuery('[data-show]').each(function() {
        var data = jQuery(this).data("show");

        for(var i = 0; i < Indicator.prototype.all.length; i++) {
            Indicator.prototype.all[i].apply( this, data );
        }
    });

    // Refresh the page every now and again.
    setTimeout(function(){ location.reload(); }, 5 * 60 * 1000);

});
//-->
</script>

<style type="text/css">
    .bold { font-weight: bold; }
    .success { color: green; }
    .light_success { color: rgb(122, 161, 41) }
    .warning { color: orange; }
    .error { color: red; }
    .hidden { display: none; }
</style>


<table id="showListTable" class="tablesorter" cellspacing="1" border="0" cellpadding="0">

  <thead>
    <tr>
        <th class="nowrap">Next Ep</th>
		<th class="nowrap">Last Snatched</th>
		<th class="nowrap">Last Watched</th>
		<th>Added</th>
        <th>Show</th>
        <th>Network</th>
        <th>Quality</th>
        <th>Downloads</th>
        <th style="display:#if not $sickbeard.HIDE_TVSHOW_STATUS then 'table-cell' else 'none'#">Active</th>
        <th class="nowrap" style="width:25%">Next Episodes</th>
        <th style="display:#if not $sickbeard.HIDE_TVSHOW_STATUS then 'table-cell' else 'none'#">Status</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th rowspan="1" colspan="1" align="center" style="background:transparent"><a href="$sbRoot/home/addShows/">Add Show</a></th>
      <th rowspan="1" colspan="10" style="background:transparent"></th>
    </tr>
  </tfoot>
  <tbody>

#for $curLoadingShow in $sickbeard.showQueueScheduler.action.loadingShowList:

  #if $curLoadingShow.show != None and $curLoadingShow.show in $sickbeard.showList:
    #continue
  #end if

  <tr>
    <td align="center">(loading)</td>
    <td colspan="#if $sickbeard.HIDE_TVSHOW_STATUS then 8 else 10#">
    #if $curLoadingShow.show == None:
    Loading... ($curLoadingShow.show_name)
    #else:
    <a href="displayShow?show=$curLoadingShow.show.tvdbid">$curLoadingShow.show.name</a>
    #end if
    </td>
  </tr>
#end for

#set $myShowList = $list($sickbeard.showList)
$myShowList.sort(lambda x, y: cmp(x.name, y.name))
#for $curShow in $myShowList:
#set $curEp = $curShow.nextEpisode()
#set $lastSnatched = None

#set $curShowDownloads = [x[1] for x in $downloadedEps if int(x[0]) == $curShow.tvdbid]
#set $curShowLastSnatched = [x[2] for x in $downloadedEps if int(x[0]) == $curShow.tvdbid]
#set $curShowAll = [x[1] for x in $allEps if int(x[0]) == $curShow.tvdbid]
#set $curShowLastWatched = [x[1] for x in $lastWatchedEps if int(x[0]) == $curShow.tvdbid]

#set $lastSnatched = ""
#if len($curShowAll) != 0:
  #if len($curShowDownloads) != 0:
    #set $dlStat = str($curShowDownloads[0])+" / "+str($curShowAll[0])
    #set $nom = $curShowDownloads[0]
    #set $den = $curShowAll[0]
  #set $lastSnatched = "" if $curShowLastSnatched[0] == None else datetime.datetime.strptime(str($curShowLastSnatched[0]), $history.dateFormat)
  #else
    #set $dlStat = "0 / "+str($curShowAll[0])
    #set $nom = 0
    #set $den = $curShowAll[0]
  #end if

  #if len($curShowLastWatched) == 1 and $curShowLastWatched[0] != None:
    #set $curShowLastWatched = datetime.datetime.fromtimestamp($curShowLastWatched[0])
  #else
    #set $curShowLastWatched = ""
  #end if
#else
  #set $dlStat = "?"
  #set $nom = 0
  #set $den = 1
#end if

  <tr>
    <td align="center" class="nowrap">#if len($curEp) != 0 then $curEp[0].airdate else ""#</td>
	<td align="center" class="nowrap">$lastSnatched</td>
	<td align="center" class="nowrap">$curShowLastWatched</td>
	<td align="center" class="nowrap"><%=datetime.datetime.fromtimestamp(curShow.added_date) if curShow.added_date > 0 else ''%></td>
    <td class="tvShow"><a href="$sbRoot/home/displayShow?show=$curShow.tvdbid">$curShow.name</a></td>
    <td>$curShow.network</td>
#if $curShow.quality in $qualityPresets:
    <td align="center"><span class="quality $qualityPresetStrings[$curShow.quality]">$qualityPresetStrings[$curShow.quality]</span></td>
#else:
    <td align="center"><span class="quality Custom">Custom</span></td>
#end if
    <td align="center"><span style="display: none;">$dlStat</span><div id="progressbar$curShow.tvdbid" style="position:relative;"></div>
        <script type="text/javascript">
        <!--
            \$(function() {
               \$("\#progressbar$curShow.tvdbid").progressbar({
                   value: parseInt($nom) * 100 / parseInt($den)
               });
               \$("\#progressbar$curShow.tvdbid").append( "<div class='progressbarText'>$dlStat</div>" )
            });
        //-->
        </script>
    </td>
    <td align="center" style="display:#if not $sickbeard.HIDE_TVSHOW_STATUS then 'table-cell' else 'none'#"><img src="$sbRoot/images/#if int($curShow.paused) == 0 and $curShow.status != "Ended" then "yes16.png\" alt=\"Y\"" else "no16.png\" alt=\"N\""# width="16" height="16" /></td>
    <td align="center">
        <div data-show='${$curShow.getJsonData()}'></div>
    </td>
    <td align="center" style="display:#if not $sickbeard.HIDE_TVSHOW_STATUS then 'table-cell' else 'none'#">#if not $sickbeard.HIDE_TVSHOW_STATUS then $curShow.status else ''#</td>
  </tr>


#end for
</tbody>
</table>

<div style="text-align:right; margin-bottom:5px">
    Updated at: ${datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
</div>

#include $os.path.join($sickbeard.PROG_DIR, "data/interfaces/default/inc_bottom.tmpl")
